############
# ghPython #
############

import rhinoscriptsyntax as rs


### Paste Matrix Data
matrix_ = [
    ["A", [[0,0],[2,4],[4,0],[3,2],[1,2]]],
    ["B", [[0,0],[0,4],[3,4],[4,3],[3,2],[0,2],[3,2],[4,1],[3,0],[0,0]]],
    ["C", [[4,3],[3,4],[1,4],[0,3],[0,1],[1,0],[3,0],[4,1]]],
    ["D", [[0,4],[0,0],[2,0],[4,1],[4,3],[2,4],[0,4]]],
    ["E", [[4,4],[0,4],[0,2],[3,2],[0,2],[0,0],[4,0]]],
    ["F", [[4,4],[0,4],[0,2],[3,2],[0,2],[0,0]]],
    ["G", [[4,3],[3,4],[1,4],[0,3],[0,1],[1,0],[3,0],[4,1],[4,2],[2,2]]],
    ["H", [[0,4],[0,0],[0,2],[4,2],[4,4],[4,0]]],
    ["I", [[1,4],[3,4],[2,4],[2,0],[1,0],[3,0]]],
    ["J", [[0,4],[4,4],[4,1],[3,0],[1,0],[0,1]]],
    ["K", [[0,4],[0,0],[0,2],[4,4],[0,2],[4,0]]],
    ["L", [[0,4],[0,0],[4,0]]],
    ["M", [[0,0],[0,4],[2,0],[4,4],[4,0]]],
    ["N", [[0,0],[0,4],[4,0],[4,4]]],
    ["O", [[1,4],[3,4],[4,3],[4,1],[3,0],[1,0],[0,1],[0,3],[1,4]]],
    ["P", [[0,0],[0,4],[3,4],[4,3],[3,2],[0,2]]],
    ["Q", [[4,2],[4,3],[3,4],[1,4],[0,3],[0,1],[1,0],[3,0],[4,1],[4,2],[2,2],[4,0]]],
    ["R", [[0,0],[0,4],[3,4],[4,3],[3,2],[0,2],[3,2],[4,0]]],
    ["S", [[4,3],[3,4],[1,4],[0,3],[1,2],[3,2],[4,1],[3,0],[1,0],[0,1]]],
    ["T", [[0,4],[4,4],[2,4],[2,0]]],
    ["U", [[0,4],[0,1],[1,0],[3,0],[4,1],[4,4]]],
    ["V", [[0,4],[2,0],[4,4]]],
    ["W", [[0,4],[1,0],[2,4],[3,0],[4,4]]],
    ["X", [[0,4],[4,0],[2,2],[0,0],[4,4]]],
    ["Y", [[0,4],[2,2],[2,0],[2,2],[4,4]]],
    ["Z", [[0,4],[4,4],[0,0],[4,0],[0,0],[2,2],[1,3],[3,1]]],
    ["0", [[0,4],[0,0],[4,0],[4,4],[0,4]]],
    ["1", [[1,3],[2,4],[2,0]]],
    ["2", [[0,3],[2,4],[4,3],[0,0],[4,0]]],
    ["3", [[0,3],[1,4],[3,4],[4,3],[3,2],[1,2],[3,2],[4,1],[3,0],[1,0],[0,1]]],
    ["4", [[4,2],[0,2],[3,4],[3,0]]],
    ["5", [[4,4],[0,4],[0,2],[3,2],[4,1],[3,0],[0,0]]],
    ["6", [[4,4],[0,4],[0,0],[4,0],[4,2],[0,2]]],
    ["7", [[0,3],[0,4],[4,4],[2,0]]],
    ["8", [[4,2],[0,2],[0,4],[4,4],[4,0],[0,0],[0,2]]],
    ["9", [[4,2],[0,2],[0,4],[4,4],[4,0],[0,0]]],
    ["*", [[1,3],[3,1],[2,2],[1,1],[3,3],[2,2],[2,4],[2,0]]],
    ["(", [[3,4],[1,3],[1,1],[3,0]]],
    [")", [[1,4],[3,3],[3,1],[1,0]]],
    ["-", [[0,2],[4,2]]],
    ["_", [[0,0],[4,0]]]
]



### Charactor
def construct_character(in_char):
    
    pts = []
    search = str(in_char).upper()
    
    
    for i in xrange(len(matrix_)):
        char, mat = matrix_[i]
        
        if search == char:
            
            ### polyline
            for j in xrange(len(mat)):
                m = mat[j]
                pts.append(rs.AddPoint(m[0] * 0.5, m[1], 0.0))
    
    return rs.AddPolyline(pts)



### String >> Charactor
def construct_text(text):
    
    out = []
    length_ = len(text)
    
    for i in xrange(length_):
        
        ### charactor
        t = text[i]
        pl = construct_character(str(t))
        pl_cp = rs.CopyObject(pl)
        
        ### Move
        pl_out = rs.MoveObject(pl_cp, (i*2.5, 0, 0))
        
        out.append(pl_out)
        
    
    return out, length_




TEXT_CURVE, length_ = construct_text(str(TEXT))

print(length_)